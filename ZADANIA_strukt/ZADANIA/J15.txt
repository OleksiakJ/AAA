/* Zadanie 1
void foo(int* tab, int n)
{
    for(int i=0;i<n;i++)
    {
        *(tab+i)*=3;
    }
}

int main()
{
    int tab[] = {1,-3,2,2,9,8};
    int *wsk=tab-2;
    foo(wsk,5);
    int b = *(wsk+=4); //b=6
    int c = b+2; // b=6  , c=8
    int d = b^c; // b=6  , c=8  , d=14
    int e = (wsk+=-1)[2]; // b= 6 , c=8  , d=14  , e=2
    e = (d *= 8) + (c /= 3); // b=6  , c=2  , d=112  , e=114
    c = d - (b+=8); // b=14 , c=98  , d=112  , e=114
    b = *wsk + e; // b=105  , c=98  , d=112  , e=114
    return 0;
}
*/
/* Zadanie 2
void foo(int n,int m,int k){
    for(int i=2*n+1;i<=3*m;i++){
        if(i%k==0){
            printf("%d\n",i);
        }
    }
}
int main(){
    foo(2,4,2);
}
*/
/* Zadanie 3
struct node{
    int x;
    struct node * next;
};

struct node * utworz(){
    return NULL;
};

struct node* dodaj (struct node*Lista,int a){
    struct node * wsk = malloc(sizeof(struct node));
    wsk->x=a;
    wsk->next=Lista;
    return wsk;

};

//-------------------------------------------

struct node* utworz2(){
    struct node * wsk = malloc(sizeof(struct node));
    wsk->next=NULL;
    return wsk;
};

void dodaj2(struct node*Lista,int a){
    struct node *wsk=malloc(sizeof(struct node));
    wsk->x=a;
    wsk->next=Lista->next;
    Lista->next=wsk;
}
//-------------------------------------------

bool porownaj(struct node*l1,struct node*l2){
    int a=0;
    int b=0;

    while(l1!=NULL){
        a++;
        l1=l1->next;
    }


    while(l2->next!=NULL){
        l2=l2->next;
        b++;
    }

    if(a==b){
        return true;
    }
    else{
        return false;
    }

}
//-------------------------------------------
int main(){
    struct node* l1 = utworz();
    l1=dodaj(l1,2);
    l1=dodaj(l1,1);
    l1=dodaj(l1,3);
    l1=dodaj(l1,4);

    struct node* l2 = utworz2();
    dodaj2(l2,2);
    dodaj2(l2,1);
    dodaj2(l2,3);
    dodaj2(l2,4);
    dodaj2(l2,5);

    printf("%d",porownaj(l1,l2));

}
*/